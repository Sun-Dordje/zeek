# Generated by binpac_quickstart

# In this file, you'll define the events that your analyzer will
# generate. A sample event is included.

# ## TODO: Edit the sample event, and add more events.

## Generated for OPCUA connections
##
## See `Google <http://lmgtfy.com/?q=OPCUA>`__ for more information about OPCUA
##
## c: The connection
##

event opcua_event%(c: connection, chunk_type: count, message_size: count%);


## HELLO Event
event opcua_hello_event%(c: connection, params: OPCUA::connection_parameters, end_point_url: string%);

## ACK Event
event opcua_ack_event%(c: connection, params: OPCUA::connection_parameters%);

## OPEN/CLOSE Event
event opcua_open_event%(c:connection, secure_channel_id: count, security_policy_uri: string,sender_certificate:count, receiver_certificate_thumbprint: count, sequence_number: count, request_id: count%);
event opcua_close_event%(c:connection%);

## MESSAGE Event
event opcua_message_event%(c:connection ,params: OPCUA::security_params,type_id:count%);

## OPEN SECURE CHANNEL Event
event opcua_open_secure_channel_request_event%(c: connection, header: OPCUA::request_header, client_protocol_version: count, security_token_request_type: count, message_security_mode:count, client_nonce: string%);
event opcua_open_secure_channel_response_event%(c: connection,header: OPCUA::response_header, server_protocol_version:count, security_token: OPCUA::security_token ,server_nonce:string%);

## BROWSE Event
event opcua_browse_request%(c:connection,header: OPCUA::request_header, view: OPCUA::view, nodes: OPCUA::browse_description_vector,request_max_references_per_node:count%);
event opcua_browse_response%(c:connection, header: OPCUA::response_header, results: OPCUA::browse_result_vector,  diagnostics_info:count%);

## READ Event
event opcua_read_request%(c:connection,header: OPCUA::request_header, max_age:count, timestamp_to_return:count,nodes_to_read:OPCUA::read_vector%);
event opcua_read_response%(c:connection, header: OPCUA::response_header, results: OPCUA::data_value_vector%);

## WRITE Event
event opcua_write_request%(c:connection%);
event opcua_write_response%(c:connection%);

## PUBLISH Event
event opcua_publish_request%(c:connection,header:OPCUA::request_header%);
event opcua_publish_response%(c:connection,header:OPCUA::response_header,subscription_id: count,more_notifications:bool, notification: OPCUA::notification%);

## CREATE SUBSCR Event
event opcua_create_subscr_request%(c:connection,header: OPCUA::request_header, publishing_interval:count,lifetime_count:count,max_keep_alive_count:count, max_notifications_per_publish: count, publishing_enable: bool, priority: count%);
event opcua_create_subscr_response%(c:connection, header: OPCUA::response_header, subscription_id: count, revised_publishing_interval: count, revised_lifetime_count: count, revised_max_keep_alive_count: count%);

## GET ENDPOINT Event
event opcua_get_endpoints_request%(c: connection, header: OPCUA::request_header, endpoint_url: string, locale_ids: OPCUA::string_vector, profile_uris: OPCUA::string_vector%);
event opcua_get_endpoints_response%(c: connection, header: OPCUA::response_header, endpoints: OPCUA::endpoint_description_vector%);
