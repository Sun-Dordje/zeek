// This file is automatically generated from opcua.pac.

#ifndef opcua_pac_h
#define opcua_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


	#include "events.bif.h"

namespace binpac {

class OPCUA_PDU;
class QUALIFIED_NAME;
class MESSAGE;
class REQUEST_HEADER;
class RESPONSE_HEADER;
class OPEN_SECURE_CHANNEL_REQUEST;
class OPEN_SECURE_CHANNEL_RESPONSE;
class OPCUA_PUBLISH_REQUEST;
class OPCUA_CLOSE_SECURE_CHANNEL_REQUEST;
class OPCUA_CLOSE_SECURE_CHANNEL_RESPONSE;
class OPCUA_BROWSE_REQUEST;
class OPCUA_BROWSE_RESPONSE;
class OPCUA_PUBLISH_RESPONSE;
class NOTIFICATION_MESSAGE;
class VIEW_DESCRIPTION;
class OPCUA_READ_REQUEST;
class OPCUA_READ_RESPONSE;
class OPCUA_WRITE_REQUEST;
class OPCUA_WRITE_RESPONSE;
class OPCUA_CREATE_SUBSCR_REQUEST;
class OPCUA_CREATE_SUBSCR_RESPONSE;
class OPCUA_GET_ENDPOINTS_REQUEST;
class OPCUA_GET_ENDPOINTS_RESPONSE;
class NODE_ID;
namespace OPCUA {
class ContextOPCUA;
class OPCUA_Conn;
class OPCUA_Flow;
} // namespace OPCUA

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
StringVal * utf16_bytestring_to_utf8_val(Connection * conn, bytestring const & utf16);
extern uint32 const READ_REQUEST;
extern uint32 const READ_RESPONSE;
extern uint32 const SECURE_CHANNEL_REQUEST;
extern uint32 const SECURE_CHANNEL_RESPONSE;
extern uint32 const PUBLISH_REQUEST;
extern uint32 const PUBLISH_RESPONSE;
extern uint32 const CLOSE_SECURE_CHANNEL_REQUEST;
extern uint32 const CLOSE_SECURE_CHANNEL_RESPONSE;
extern uint32 const BROWSE_REQUEST;
extern uint32 const BROWSE_RESPONSE;
extern uint32 const WRITE_REQUEST;
extern uint32 const WRITE_RESPONSE;
extern uint32 const CREATE_SUBSCR_REQUEST;
extern uint32 const CREATE_SUBSCR_RESPONSE;
extern uint32 const GET_ENDPOINTS_REQUEST;
extern uint32 const GET_ENDPOINTS_RESPONSE;

class OPCUA_PDU
{
public:
	OPCUA_PDU(bool is_orig);
	~OPCUA_PDU();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & data() const { return data_; }
	bool is_orig() const { return is_orig_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring data_;
	bool is_orig_;
	int byteorder_;
};


class QUALIFIED_NAME
{
public:
	QUALIFIED_NAME();
	~QUALIFIED_NAME();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint16 id() const { return id_; }
	uint32 len() const { return len_; }
	int val_case_index() const	{ return val_case_index_; }
	bytestring const & name() const
		{
		return name_;
		}
	
protected:
	uint16 id_;
	uint32 len_;
	int val_case_index_;
	bytestring name_;
};


class MESSAGE
{
public:
	MESSAGE();
	~MESSAGE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	vector<uint8> * type_id() const { return type_id_; }
	int content_case_index() const	{ return content_case_index_; }
	OPEN_SECURE_CHANNEL_REQUEST * open_secure_channel_request() const
		{
		switch ( content_case_index() )
			{
			case 446:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:52:open_secure_channel_request", content_case_index(), "SECURE_CHANNEL_REQUEST");
				break;
			}
		return open_secure_channel_request_;
		}
	OPEN_SECURE_CHANNEL_RESPONSE * open_secure_channel_response() const
		{
		switch ( content_case_index() )
			{
			case 449:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:53:open_secure_channel_response", content_case_index(), "SECURE_CHANNEL_RESPONSE");
				break;
			}
		return open_secure_channel_response_;
		}
	OPCUA_PUBLISH_REQUEST * publish_request() const
		{
		switch ( content_case_index() )
			{
			case 824:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:54:publish_request", content_case_index(), "PUBLISH_REQUEST");
				break;
			}
		return publish_request_;
		}
	OPCUA_PUBLISH_RESPONSE * publish_response() const
		{
		switch ( content_case_index() )
			{
			case 827:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:55:publish_response", content_case_index(), "PUBLISH_RESPONSE");
				break;
			}
		return publish_response_;
		}
	OPCUA_CLOSE_SECURE_CHANNEL_REQUEST * close_secure_channel_request() const
		{
		switch ( content_case_index() )
			{
			case 450:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:56:close_secure_channel_request", content_case_index(), "CLOSE_SECURE_CHANNEL_REQUEST");
				break;
			}
		return close_secure_channel_request_;
		}
	OPCUA_CLOSE_SECURE_CHANNEL_RESPONSE * close_secure_channel_response() const
		{
		switch ( content_case_index() )
			{
			case 453:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:57:close_secure_channel_response", content_case_index(), "CLOSE_SECURE_CHANNEL_RESPONSE");
				break;
			}
		return close_secure_channel_response_;
		}
	OPCUA_BROWSE_REQUEST * browse_request() const
		{
		switch ( content_case_index() )
			{
			case 525:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:58:browse_request", content_case_index(), "BROWSE_REQUEST");
				break;
			}
		return browse_request_;
		}
	OPCUA_BROWSE_RESPONSE * browse_response() const
		{
		switch ( content_case_index() )
			{
			case 528:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:59:browse_response", content_case_index(), "BROWSE_RESPONSE");
				break;
			}
		return browse_response_;
		}
	OPCUA_READ_REQUEST * read_request() const
		{
		switch ( content_case_index() )
			{
			case 629:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:60:read_request", content_case_index(), "READ_REQUEST");
				break;
			}
		return read_request_;
		}
	OPCUA_READ_RESPONSE * read_response() const
		{
		switch ( content_case_index() )
			{
			case 632:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:61:read_response", content_case_index(), "READ_RESPONSE");
				break;
			}
		return read_response_;
		}
	OPCUA_WRITE_REQUEST * write_request() const
		{
		switch ( content_case_index() )
			{
			case 671:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:62:write_request", content_case_index(), "WRITE_REQUEST");
				break;
			}
		return write_request_;
		}
	OPCUA_WRITE_RESPONSE * write_response() const
		{
		switch ( content_case_index() )
			{
			case 674:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:63:write_response", content_case_index(), "WRITE_RESPONSE");
				break;
			}
		return write_response_;
		}
	OPCUA_CREATE_SUBSCR_REQUEST * subscription_request() const
		{
		switch ( content_case_index() )
			{
			case 785:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:64:subscription_request", content_case_index(), "CREATE_SUBSCR_REQUEST");
				break;
			}
		return subscription_request_;
		}
	OPCUA_CREATE_SUBSCR_RESPONSE * subscription_response() const
		{
		switch ( content_case_index() )
			{
			case 788:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:65:subscription_response", content_case_index(), "CREATE_SUBSCR_RESPONSE");
				break;
			}
		return subscription_response_;
		}
	OPCUA_GET_ENDPOINTS_REQUEST * get_endpoints_request() const
		{
		switch ( content_case_index() )
			{
			case 428:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:66:get_endpoints_request", content_case_index(), "GET_ENDPOINTS_REQUEST");
				break;
			}
		return get_endpoints_request_;
		}
	OPCUA_GET_ENDPOINTS_RESPONSE * get_endpoints_response() const
		{
		switch ( content_case_index() )
			{
			case 431:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/stagiaire2019/Bureau/stage/t/zeek/src/analyzer/protocol/opcua/opcua-protocol.pac:67:get_endpoints_response", content_case_index(), "GET_ENDPOINTS_RESPONSE");
				break;
			}
		return get_endpoints_response_;
		}
	
protected:
	vector<uint8> * type_id_;
	uint8 type_id__elem_;
	int content_case_index_;
	OPEN_SECURE_CHANNEL_REQUEST * open_secure_channel_request_;
	OPEN_SECURE_CHANNEL_RESPONSE * open_secure_channel_response_;
	OPCUA_PUBLISH_REQUEST * publish_request_;
	OPCUA_PUBLISH_RESPONSE * publish_response_;
	OPCUA_CLOSE_SECURE_CHANNEL_REQUEST * close_secure_channel_request_;
	OPCUA_CLOSE_SECURE_CHANNEL_RESPONSE * close_secure_channel_response_;
	OPCUA_BROWSE_REQUEST * browse_request_;
	OPCUA_BROWSE_RESPONSE * browse_response_;
	OPCUA_READ_REQUEST * read_request_;
	OPCUA_READ_RESPONSE * read_response_;
	OPCUA_WRITE_REQUEST * write_request_;
	OPCUA_WRITE_RESPONSE * write_response_;
	OPCUA_CREATE_SUBSCR_REQUEST * subscription_request_;
	OPCUA_CREATE_SUBSCR_RESPONSE * subscription_response_;
	OPCUA_GET_ENDPOINTS_REQUEST * get_endpoints_request_;
	OPCUA_GET_ENDPOINTS_RESPONSE * get_endpoints_response_;
};


class REQUEST_HEADER
{
public:
	REQUEST_HEADER();
	~REQUEST_HEADER();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	NODE_ID * authentication_token() const { return authentication_token_; }
	uint64 timestamp() const { return timestamp_; }
	uint32 request_handle() const { return request_handle_; }
	uint32 return_diagnostics() const { return return_diagnostics_; }
	uint32 audit_entry_id() const { return audit_entry_id_; }
	uint32 timeout_hint() const { return timeout_hint_; }
	vector<uint8> * additional_header() const { return additional_header_; }
	
protected:
	NODE_ID * authentication_token_;
	uint64 timestamp_;
	uint32 request_handle_;
	uint32 return_diagnostics_;
	uint32 audit_entry_id_;
	uint32 timeout_hint_;
	vector<uint8> * additional_header_;
	uint8 additional_header__elem_;
};


class RESPONSE_HEADER
{
public:
	RESPONSE_HEADER();
	~RESPONSE_HEADER();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint64 timestamp() const { return timestamp_; }
	uint32 request_handle() const { return request_handle_; }
	uint32 service_result() const { return service_result_; }
	uint32 service_diagnostics_flag() const { return service_diagnostics_flag_; }
	uint32 string_table() const { return string_table_; }
	vector<uint8> * additional_header() const { return additional_header_; }
	
protected:
	uint64 timestamp_;
	uint32 request_handle_;
	uint32 service_result_;
	uint32 service_diagnostics_flag_;
	uint32 string_table_;
	vector<uint8> * additional_header_;
	uint8 additional_header__elem_;
};


class OPEN_SECURE_CHANNEL_REQUEST
{
public:
	OPEN_SECURE_CHANNEL_REQUEST();
	~OPEN_SECURE_CHANNEL_REQUEST();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	REQUEST_HEADER * header() const { return header_; }
	uint32 client_protocol_version() const { return client_protocol_version_; }
	uint32 security_token_request_type() const { return security_token_request_type_; }
	uint32 message_security_mode() const { return message_security_mode_; }
	uint16 client_nonce() const { return client_nonce_; }
	uint32 request_lifetime() const { return request_lifetime_; }
	
protected:
	REQUEST_HEADER * header_;
	uint32 client_protocol_version_;
	uint32 security_token_request_type_;
	uint32 message_security_mode_;
	uint16 client_nonce_;
	uint32 request_lifetime_;
};


class OPEN_SECURE_CHANNEL_RESPONSE
{
public:
	OPEN_SECURE_CHANNEL_RESPONSE();
	~OPEN_SECURE_CHANNEL_RESPONSE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	RESPONSE_HEADER * header() const { return header_; }
	uint32 client_protocol_version() const { return client_protocol_version_; }
	uint32 security_token_request_type() const { return security_token_request_type_; }
	uint32 message_security_mode() const { return message_security_mode_; }
	uint16 client_nonce() const { return client_nonce_; }
	uint32 request_lifetime() const { return request_lifetime_; }
	
protected:
	RESPONSE_HEADER * header_;
	uint32 client_protocol_version_;
	uint32 security_token_request_type_;
	uint32 message_security_mode_;
	uint16 client_nonce_;
	uint32 request_lifetime_;
};


class OPCUA_PUBLISH_REQUEST
{
public:
	OPCUA_PUBLISH_REQUEST();
	~OPCUA_PUBLISH_REQUEST();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	REQUEST_HEADER * header() const { return header_; }
	uint32 subscription_ack() const { return subscription_ack_; }
	
protected:
	REQUEST_HEADER * header_;
	uint32 subscription_ack_;
};


class OPCUA_CLOSE_SECURE_CHANNEL_REQUEST
{
public:
	OPCUA_CLOSE_SECURE_CHANNEL_REQUEST();
	~OPCUA_CLOSE_SECURE_CHANNEL_REQUEST();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	REQUEST_HEADER * header() const { return header_; }
	
protected:
	REQUEST_HEADER * header_;
};


class OPCUA_CLOSE_SECURE_CHANNEL_RESPONSE
{
public:
	OPCUA_CLOSE_SECURE_CHANNEL_RESPONSE();
	~OPCUA_CLOSE_SECURE_CHANNEL_RESPONSE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	RESPONSE_HEADER * header() const { return header_; }
	
protected:
	RESPONSE_HEADER * header_;
};


class OPCUA_BROWSE_REQUEST
{
public:
	OPCUA_BROWSE_REQUEST();
	~OPCUA_BROWSE_REQUEST();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	REQUEST_HEADER * header() const { return header_; }
	VIEW_DESCRIPTION * view() const { return view_; }
	uint32 requested_max_references_per_node() const { return requested_max_references_per_node_; }
	
protected:
	REQUEST_HEADER * header_;
	VIEW_DESCRIPTION * view_;
	uint32 requested_max_references_per_node_;
};


class OPCUA_BROWSE_RESPONSE
{
public:
	OPCUA_BROWSE_RESPONSE();
	~OPCUA_BROWSE_RESPONSE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	RESPONSE_HEADER * header() const { return header_; }
	uint64 results() const { return results_; }
	uint64 diagnostic_info_collection() const { return diagnostic_info_collection_; }
	
protected:
	RESPONSE_HEADER * header_;
	uint64 results_;
	uint64 diagnostic_info_collection_;
};


class OPCUA_PUBLISH_RESPONSE
{
public:
	OPCUA_PUBLISH_RESPONSE();
	~OPCUA_PUBLISH_RESPONSE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	RESPONSE_HEADER * header() const { return header_; }
	uint64 subscription_id() const { return subscription_id_; }
	uint64 available_sequence_numbers() const { return available_sequence_numbers_; }
	uint8 more_notifications() const { return more_notifications_; }
	uint64 notification_message() const { return notification_message_; }
	uint64 status_code_collection() const { return status_code_collection_; }
	uint64 diagnostic_info_collection() const { return diagnostic_info_collection_; }
	
protected:
	RESPONSE_HEADER * header_;
	uint64 subscription_id_;
	uint64 available_sequence_numbers_;
	uint8 more_notifications_;
	uint64 notification_message_;
	uint64 status_code_collection_;
	uint64 diagnostic_info_collection_;
};


class NOTIFICATION_MESSAGE
{
public:
	NOTIFICATION_MESSAGE();
	~NOTIFICATION_MESSAGE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 sequence_number() const { return sequence_number_; }
	uint64 publish_time() const { return publish_time_; }
	uint64 notification_data() const { return notification_data_; }
	
protected:
	uint32 sequence_number_;
	uint64 publish_time_;
	uint64 notification_data_;
};


class VIEW_DESCRIPTION
{
public:
	VIEW_DESCRIPTION();
	~VIEW_DESCRIPTION();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	NODE_ID * view_id() const { return view_id_; }
	uint64 time_stamp() const { return time_stamp_; }
	uint32 view_version() const { return view_version_; }
	
protected:
	NODE_ID * view_id_;
	uint64 time_stamp_;
	uint32 view_version_;
};


class OPCUA_READ_REQUEST
{
public:
	OPCUA_READ_REQUEST();
	~OPCUA_READ_REQUEST();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	REQUEST_HEADER * header() const { return header_; }
	uint64 max_age() const { return max_age_; }
	uint64 time_stamp() const { return time_stamp_; }
	uint64 nodetoread() const { return nodetoread_; }
	
protected:
	REQUEST_HEADER * header_;
	uint64 max_age_;
	uint64 time_stamp_;
	uint64 nodetoread_;
};


class OPCUA_READ_RESPONSE
{
public:
	OPCUA_READ_RESPONSE();
	~OPCUA_READ_RESPONSE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	RESPONSE_HEADER * header() const { return header_; }
	uint64 results() const { return results_; }
	uint64 diagnostic_info_collection() const { return diagnostic_info_collection_; }
	
protected:
	RESPONSE_HEADER * header_;
	uint64 results_;
	uint64 diagnostic_info_collection_;
};


class OPCUA_WRITE_REQUEST
{
public:
	OPCUA_WRITE_REQUEST();
	~OPCUA_WRITE_REQUEST();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	REQUEST_HEADER * header() const { return header_; }
	uint64 nodes_to_write() const { return nodes_to_write_; }
	
protected:
	REQUEST_HEADER * header_;
	uint64 nodes_to_write_;
};


class OPCUA_WRITE_RESPONSE
{
public:
	OPCUA_WRITE_RESPONSE();
	~OPCUA_WRITE_RESPONSE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	RESPONSE_HEADER * header() const { return header_; }
	uint64 results() const { return results_; }
	uint64 diagnostic_info_collection() const { return diagnostic_info_collection_; }
	
protected:
	RESPONSE_HEADER * header_;
	uint64 results_;
	uint64 diagnostic_info_collection_;
};


class OPCUA_CREATE_SUBSCR_REQUEST
{
public:
	OPCUA_CREATE_SUBSCR_REQUEST();
	~OPCUA_CREATE_SUBSCR_REQUEST();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	REQUEST_HEADER * header() const { return header_; }
	uint64 requested_publishing_interval() const { return requested_publishing_interval_; }
	uint32 requested_lifetime_count() const { return requested_lifetime_count_; }
	uint32 requested_max_keep_alive_count() const { return requested_max_keep_alive_count_; }
	uint32 max_notifications_per_publish() const { return max_notifications_per_publish_; }
	uint8 publishing_enabled() const { return publishing_enabled_; }
	uint8 priority() const { return priority_; }
	
protected:
	REQUEST_HEADER * header_;
	uint64 requested_publishing_interval_;
	uint32 requested_lifetime_count_;
	uint32 requested_max_keep_alive_count_;
	uint32 max_notifications_per_publish_;
	uint8 publishing_enabled_;
	uint8 priority_;
};


class OPCUA_CREATE_SUBSCR_RESPONSE
{
public:
	OPCUA_CREATE_SUBSCR_RESPONSE();
	~OPCUA_CREATE_SUBSCR_RESPONSE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	RESPONSE_HEADER * header() const { return header_; }
	uint64 revised_publishing_interval() const { return revised_publishing_interval_; }
	uint32 revised_lifetime_count() const { return revised_lifetime_count_; }
	uint32 revised_max_keep_alive_count() const { return revised_max_keep_alive_count_; }
	
protected:
	RESPONSE_HEADER * header_;
	uint64 revised_publishing_interval_;
	uint32 revised_lifetime_count_;
	uint32 revised_max_keep_alive_count_;
};


class OPCUA_GET_ENDPOINTS_REQUEST
{
public:
	OPCUA_GET_ENDPOINTS_REQUEST();
	~OPCUA_GET_ENDPOINTS_REQUEST();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	REQUEST_HEADER * header() const { return header_; }
	uint32 end_point_url() const { return end_point_url_; }
	uint64 local_lelds() const { return local_lelds_; }
	uint64 profile_uris() const { return profile_uris_; }
	
protected:
	REQUEST_HEADER * header_;
	uint32 end_point_url_;
	uint64 local_lelds_;
	uint64 profile_uris_;
};


class OPCUA_GET_ENDPOINTS_RESPONSE
{
public:
	OPCUA_GET_ENDPOINTS_RESPONSE();
	~OPCUA_GET_ENDPOINTS_RESPONSE();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	RESPONSE_HEADER * header() const { return header_; }
	uint64 end_points() const { return end_points_; }
	
protected:
	RESPONSE_HEADER * header_;
	uint64 end_points_;
};


class NODE_ID
{
public:
	NODE_ID();
	~NODE_ID();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 namespace_index() const { return namespace_index_; }
	vector<uint8> * type_id() const { return type_id_; }
	uint16 id() const { return id_; }
	
protected:
	uint32 namespace_index_;
	vector<uint8> * type_id_;
	uint8 type_id__elem_;
	uint16 id_;
};

namespace OPCUA {

class ContextOPCUA
{
public:
	ContextOPCUA(OPCUA_Conn * connection, OPCUA_Flow * flow);
	~ContextOPCUA();
	
	// Member access functions
	OPCUA_Conn * connection() const { return connection_; }
	OPCUA_Flow * flow() const { return flow_; }
	
protected:
	OPCUA_Conn * connection_;
	OPCUA_Flow * flow_;
};


class OPCUA_Conn : public binpac::ConnectionAnalyzer
{
public:
	OPCUA_Conn(BroAnalyzer const & bro_analyzer);
	~OPCUA_Conn();
	
	// Member access functions
	OPCUA_Flow * upflow() const { return upflow_; }
	OPCUA_Flow * downflow() const { return downflow_; }
	BroAnalyzer const & bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
protected:
	OPCUA_Flow * upflow_;
	OPCUA_Flow * downflow_;
	BroAnalyzer bro_analyzer_;
};


class OPCUA_Flow : public binpac::FlowAnalyzer
{
public:
	OPCUA_Flow(OPCUA_Conn * connection, bool is_orig);
	~OPCUA_Flow();
	
	// Member access functions
	OPCUA_Conn * connection() const { return connection_; }
	bool is_orig() const { return is_orig_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
protected:
	OPCUA_PDU * dataunit_;
	ContextOPCUA * context_;
	OPCUA_Conn * connection_;
	bool is_orig_;
};

} // namespace OPCUA
}  // namespace binpac
#endif /* opcua_pac_h */
